{"version":3,"sources":["components/ToDo/index.js","components/NewTask/index.js","components/Features/index.js","components/Extra/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["ToDo","props","attr","value","state","ListGroup","Item","as","className","task","Button","onClick","variant","size","NewTask","Form","onSubmit","InputGroup","controlId","Prepend","Text","Control","type","placeholder","onChange","Append","Features","Row","Col","Extra","App","toDos","newTask","_handleChange","bind","_handleSubmit","localStorage","setItem","JSON","stringify","this","index","taskTemp","setState","forceUpdate","saved","parse","getItem","removeItem","_fetchTasks","e","target","preventDefault","push","Container","map","toDo","_toggleTask","_clear","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","memory","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.32f0ce41.chunk.js","sourcesContent":["import { ListGroup, Button } from 'react-bootstrap';\n\n\nfunction ToDo(props) {\n    var attr = {};\n    if (props.value.state) {\n        attr['disabled'] = 'disabled';\n    }\n    return (\n        <ListGroup.Item as='li' {...attr}>\n            <div className='d-flex align-items-center justify-content-between'>\n                <p className=\"mb-0\">{props.value.task}</p>\n                {props.value.state\n                    ? <Button className=\"ml-2\" onClick={props.onClick} variant=\"success\" size='sm'>✓</Button>\n                    : <Button className=\"ml-2\" onClick={props.onClick} variant=\"danger\" size='sm'>✕</Button>\n                }\n            </div>\n        </ListGroup.Item>\n        );\n}\n \nexport default ToDo;","import { Button, Form, InputGroup } from 'react-bootstrap';\n\nfunction NewTask(props) {\n    return (\n        <Form className=\"mt-5\" onSubmit={props.onSubmit}>\n            <h3 className=\"mb-3\">Create new task</h3>\n            <InputGroup controlId=\"newTask\">\n                <InputGroup.Prepend>\n                    <InputGroup.Text>Task:</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                    type=\"text\" \n                    value={props.value}\n                    placeholder={'What is your task?'} \n                    onChange={props.onChange} />\n                    <InputGroup.Append>\n                        <Button variant=\"primary\" type={'submit'}>Create</Button>\n                    </InputGroup.Append>\n            </InputGroup>\n        </Form>\n    )\n}\n\nexport default NewTask;","import { Row, Col } from 'react-bootstrap'\n\nfunction Features() {\n    return (\n        <Row className=\"mt-5\">\n            <Col>\n                <h3 className=\"mb-3\">Implemented Features</h3>\n                <ul>\n                    <li>Add new tasks</li>\n                    <li>Toggle task's state</li>\n                    <li>Save & Load Tasks from \"localStorage\"</li>\n                    <li>Add to your mobile (PWA)</li>\n                </ul>\n            </Col>\n            <Col>\n                <h3 className=\"mb-3\">Feather features</h3>\n                <ul>\n                    <li>Make it work offline (works partially. Tasks are hidden - localStorage issue. But at least it do not closes)</li>\n                    <li>Remove Task</li>\n                    <li>Sort Tasks</li>\n                </ul>\n            </Col>\n        </Row>\n    )\n}\n\nexport default Features;","import { Button } from \"react-bootstrap\";\n\nfunction Extra(props) {\n    return (\n        <div className=\"mt-5\">\n            <h3 className=\"mb-3\">Extra Features</h3>\n            <Button variant='info' onClick={() => props.onClick()}>Clear cache</Button>\n        </div>\n    )\n}\nexport default Extra;","import React, { Component } from 'react';\nimport { Container, ListGroup } from 'react-bootstrap';\n\nimport { ToDo, NewTask, Features, Extra } from '../components';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toDos: this.props.value,\n            newTask: '',\n        };\n\n        this._handleChange = this._handleChange.bind(this);\n        this._handleSubmit = this._handleSubmit.bind(this);\n    }\n\n    componentDidUpdate() {\n        localStorage.setItem('toDos', JSON.stringify(this.state.toDos));\n    }\n\n    _toggleTask(task, index) {\n        // Create a copy of the data\n        let state = [...this.state.toDos];\n        let taskTemp = {...state[index]};\n\n        // Change data\n        taskTemp.state = !task.state;\n\n        // Put it back\n        state[index] = taskTemp;\n\n        // Replace data\n        this.setState({toDos: state});\n\n        // Rerender\n        this.forceUpdate();\n    }\n\n    // Download & Render Tasks\n    _fetchTasks() {\n        let saved = JSON.parse(localStorage.getItem('toDos'));\n\n        if (saved != null) {\n            this.setState({toDos: saved});\n        } else {\n            this.setState({toDos: []});\n        }\n        this.forceUpdate();\n    }\n\n    // Clear all tasks\n    _clear() {\n        localStorage.removeItem('toDos');\n        this._fetchTasks();\n    }\n\n    // Create Task Methods\n    _handleChange(e) {\n        let task = e.target.value;\n        this.setState({newTask: task});\n    }\n\n    _handleSubmit(e) {\n        e.preventDefault();\n        \n        // Make a copy & Mutate\n        let state = [...this.state.toDos];\n        state.push(\n            {\n                task: this.state.newTask,\n                state: false\n            },\n        )\n\n        // Update date\n        this.setState({toDos: state});\n        this.setState({newTask: ''})\n        this.forceUpdate();\n    }\n\n    render() {\n\n        return (\n            <Container>\n                <h1 className='text-center mb-3'>To Do List</h1>\n                <ListGroup as='ul'>\n                    {this.state.toDos.map((toDo, index) => {\n                    return <ToDo\n                                key={index}\n                                value={toDo}\n                                onClick={() => this._toggleTask(toDo, index) }\n                            />\n                    })}\n                </ListGroup>\n                <NewTask \n                    onSubmit={this._handleSubmit}\n                    value={this.state.newTask}\n                    onChange={this._handleChange}\n                    ></NewTask>\n                <Extra onClick={() => this._clear()}></Extra>\n                <Features></Features>\n            </Container>\n         );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App'\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/app.scss';\n\n// Get Taks from memory\nconst memory = localStorage.getItem('toDos');\n\n// Load if saved || load clear app\nReactDOM.render(\n    memory\n        ? <App value={JSON.parse(memory)} />\n        : <App value={[]} />\n    ,\n    document.getElementById('root')\n);\n\nserviceWorker.register();"],"sourceRoot":""}